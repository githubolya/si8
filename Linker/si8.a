;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.04.4a Advanced
;Automatic Program Generator
;© Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 12.10.2010
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega64
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega64.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <bcd.h>
;#include <math.h>
;#include <string.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0<256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;
;
;
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0055 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0056 char data;
; 0000 0057 while (rx_counter0==0);
;PCODE: $0000000F VOL: 0
;	data -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0058 data=rx_buffer0[rx_rd_index0];
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0059 if (++rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 005A #asm("cli")
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
	cli
;PCODE: $00000020 VOL: 0
; 0000 005B --rx_counter0;
;PCODE: $00000021 VOL: 0
; 0000 005C #asm("sei")
;PCODE: $00000022 VOL: 0
	sei
;PCODE: $00000023 VOL: 0
; 0000 005D return data;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 005E }
;PCODE: $00000027 VOL: 0
;#pragma used-
;#endif
;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 0065 {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0066 char status,data;
; 0000 0067 status=UCSR0A;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0068 data=UDR0;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0069 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 006A    {
; 0000 006B    rx_buffer0[rx_wr_index0]=data;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 006C    if (++rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 006D    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 006E       {
; 0000 006F       rx_counter0=0;
;PCODE: $00000041 VOL: 0
; 0000 0070       rx_buffer_overflow0=1;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0071       };
;PCODE: $00000045 VOL: 0
; 0000 0072    };
;PCODE: $00000046 VOL: 0
; 0000 0073 }
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;
; //////////////---------------------------------------------------
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0<256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0088 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0089 while (tx_counter0 == TX_BUFFER_SIZE0);
;	c -> Y+0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 008A #asm("cli")
;PCODE: $00000053 VOL: 0
	cli
;PCODE: $00000054 VOL: 0
; 0000 008B if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 008C    {
; 0000 008D    tx_buffer0[tx_wr_index0]=c;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 008E    if (++tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 008F    ++tx_counter0;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0090    }
; 0000 0091 else
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0092    UDR0=c;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0093 #asm("sei")
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
	sei
;PCODE: $0000006E VOL: 0
; 0000 0094 }
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;#pragma used-
;#endif
;
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 009B {
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009C if (tx_counter0)
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 009D    {
; 0000 009E    --tx_counter0;
;PCODE: $00000076 VOL: 0
; 0000 009F    UDR0=tx_buffer0[tx_rd_index0];
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00A0    if (++tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00A1    };
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00A2 }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;
;
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 00AB {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00AC // Place your code here
; 0000 00AD  OCR1A=OCR1A+0xFA;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00AE }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;
;
;
;
;//------------------------------------------------------------------------------------
;// Declare your global variables here
;
;
;
;void add_CRC_si8(char * frame, char lenth)
; 0000 00B9 {
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00BA unsigned char i,j;
; 0000 00BB unsigned int CRC=0x0000;
; 0000 00BC char fr;
; 0000 00BD for(i=0;i<lenth;i++)
;PCODE: $00000090 VOL: 0
;	*frame -> Y+7
;	lenth -> Y+6
;	i -> R17
;	j -> R16
;	CRC -> R18,R19
;	fr -> R21
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00BE  {fr=frame[i];
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00BF   for( j=0; j<8; j++,fr<<=1 )
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00C0      {
; 0000 00C1       if( (fr^(CRC>>8))&0x80 )
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00C2         {
; 0000 00C3         CRC<<=1;
;PCODE: $000000AE VOL: 0
; 0000 00C4         CRC^=0x8F57;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00C5         }
; 0000 00C6       else CRC<<=1;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00C7      }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00C8  }
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00C9 frame[lenth]=CRC>>8;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00CA frame[lenth+1]=CRC;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00CB return;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00CC }
;PCODE: $000000CF VOL: 0
;
;char check_CRC_si8(char * frame, char len) //  len - äëèíà áåç êîíòðîëüíîé ñóììû
; 0000 00CF {
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00D0 unsigned char i,j;
; 0000 00D1 unsigned int CRC=0x0000;
; 0000 00D2 char fr;
; 0000 00D3 for(i=0;i<len;i++)
;PCODE: $000000D2 VOL: 0
;	*frame -> Y+7
;	len -> Y+6
;	i -> R17
;	j -> R16
;	CRC -> R18,R19
;	fr -> R21
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00D4  {fr=frame[i];
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00D5   for( j=0; j<8; j++,fr<<=1 )
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00D6      {
; 0000 00D7        if( (fr^(CRC>>8))&0x80 )
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00D8          {
; 0000 00D9          CRC<<=1;
;PCODE: $000000F0 VOL: 0
; 0000 00DA          CRC^=0x8F57;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00DB          }
; 0000 00DC        else {CRC<<=1;};
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00DD      }
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00DE  }
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00DF  if(frame[len]==(CRC>>8))
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00E0    { if (frame[len+1]==(CRC&0x00ff))
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00E1         {return 0;}
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00E2      else {return 1;};
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00E3    }
; 0000 00E4  else {return 1;};
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00E5 }
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;
;void get_request_ascii_si8(char * frame_ascii, char * frame, char lenth)
; 0000 00E8 { unsigned char i;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 00E9   char tetrada_up, tetrada_low;
; 0000 00EA   for(i=0;i<lenth;i++)
;PCODE: $0000012F VOL: 0
;	*frame_ascii -> Y+7
;	*frame -> Y+5
;	lenth -> Y+4
;	i -> R17
;	tetrada_up -> R16
;	tetrada_low -> R19
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00EB    { tetrada_up=(*(frame+i))&0xF0;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00EC      tetrada_up>>=4;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00ED      tetrada_low=(*(frame+i))&0x0F;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00EE 
; 0000 00EF      switch (tetrada_up)
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00F0      {case 0x0: frame_ascii[i*2]='G';
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00F1        break;
;PCODE: $00000155 VOL: 0
; 0000 00F2       case 0x1: frame_ascii[i*2]='H';
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00F3        break;
;PCODE: $0000015F VOL: 0
; 0000 00F4       case 0x2: frame_ascii[i*2]='I';
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 00F5        break;
;PCODE: $00000169 VOL: 0
; 0000 00F6       case 0x3: frame_ascii[i*2]='J';
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00F7        break;
;PCODE: $00000173 VOL: 0
; 0000 00F8       case 0x4: frame_ascii[i*2]='K';
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 00F9        break;
;PCODE: $0000017D VOL: 0
; 0000 00FA       case 0x5: frame_ascii[i*2]='L';
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00FB        break;
;PCODE: $00000187 VOL: 0
; 0000 00FC       case 0x6: frame_ascii[i*2]='M';
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 00FD        break;
;PCODE: $00000191 VOL: 0
; 0000 00FE       case 0x7: frame_ascii[i*2]='N';
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 00FF        break;
;PCODE: $0000019B VOL: 0
; 0000 0100       case 0x8: frame_ascii[i*2]='O';
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 0101        break;
;PCODE: $000001A5 VOL: 0
; 0000 0102       case 0x9: frame_ascii[i*2]='P';
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 0103        break;
;PCODE: $000001AF VOL: 0
; 0000 0104       case 0xA: frame_ascii[i*2]='Q';
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0105        break;
;PCODE: $000001B9 VOL: 0
; 0000 0106       case 0xB: frame_ascii[i*2]='R';
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0107        break;
;PCODE: $000001C3 VOL: 0
; 0000 0108       case 0xC: frame_ascii[i*2]='S';
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 0109        break;
;PCODE: $000001CD VOL: 0
; 0000 010A       case 0xD: frame_ascii[i*2]='T';
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 010B        break;
;PCODE: $000001D7 VOL: 0
; 0000 010C       case 0xE: frame_ascii[i*2]='U';
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 010D        break;
;PCODE: $000001E1 VOL: 0
; 0000 010E       case 0xF: frame_ascii[i*2]='V';
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 010F        break;
;PCODE: $000001EB VOL: 0
; 0000 0110       default: break;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0111      };
;PCODE: $000001EE VOL: 0
; 0000 0112 
; 0000 0113 
; 0000 0114       switch (tetrada_low)
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0115      {case 0x0:  frame_ascii[i*2+1]='G';
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0116        break;
;PCODE: $000001FA VOL: 0
; 0000 0117       case 0x1:  frame_ascii[i*2+1]='H';
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0118        break;
;PCODE: $00000205 VOL: 0
; 0000 0119       case 0x2:  frame_ascii[i*2+1]='I';
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 011A        break;
;PCODE: $00000210 VOL: 0
; 0000 011B       case 0x3:  frame_ascii[i*2+1]='J';
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 011C        break;
;PCODE: $0000021B VOL: 0
; 0000 011D       case 0x4:  frame_ascii[i*2+1]='K';
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 011E        break;
;PCODE: $00000226 VOL: 0
; 0000 011F       case 0x5:  frame_ascii[i*2+1]='L';
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0120        break;
;PCODE: $00000231 VOL: 0
; 0000 0121       case 0x6:  frame_ascii[i*2+1]='M';
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0122        break;
;PCODE: $0000023C VOL: 0
; 0000 0123       case 0x7:  frame_ascii[i*2+1]='N';
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 0124        break;
;PCODE: $00000247 VOL: 0
; 0000 0125       case 0x8:  frame_ascii[i*2+1]='O';
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0126        break;
;PCODE: $00000252 VOL: 0
; 0000 0127       case 0x9:  frame_ascii[i*2+1]='P';
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 0128        break;
;PCODE: $0000025D VOL: 0
; 0000 0129       case 0xA:  frame_ascii[i*2+1]='Q';
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 012A        break;
;PCODE: $00000268 VOL: 0
; 0000 012B       case 0xB:  frame_ascii[i*2+1]='R';
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
; 0000 012C        break;
;PCODE: $00000273 VOL: 0
; 0000 012D       case 0xC:  frame_ascii[i*2+1]='S';
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 012E        break;
;PCODE: $0000027E VOL: 0
; 0000 012F       case 0xD:  frame_ascii[i*2+1]='T';
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 0130        break;
;PCODE: $00000289 VOL: 0
; 0000 0131       case 0xE:  frame_ascii[i*2+1]='U';
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 0132        break;
;PCODE: $00000294 VOL: 0
; 0000 0133       case 0xF:  frame_ascii[i*2+1]='V';
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 0134        break;
;PCODE: $0000029F VOL: 0
; 0000 0135       default: break;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0136      };
;PCODE: $000002A2 VOL: 0
; 0000 0137    }
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0138 }
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;
;char check_dev_adr_si8(char * frame, char device)
; 0000 013B { if(frame[0]!=device) {return 1;}
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;	*frame -> Y+1
;	device -> Y+0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 013C   else{ return 0;};
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 013D }
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;
;//void send_request_si8(char device, unsigned int pnu)
;//{
;//char i;
;//char frame[6], frame_ascii[12];
;//frame[0]=device;
;//frame[1]=0x10;
;//frame[2]=pnu>>8;;
;//frame[3]=pnu;
;//add_CRC_si8(frame,4);
;//get_request_ascii_si8(frame_ascii,frame,6);
;//putchar_modbus('#');
;//for(i=0; i<12; i++) putchar_modbus(frame_ascii[i]);
;//putchar_modbus(0x0D);
;//}
;
;char hex_tetrada_from_ascii_char( char ascii_char)
; 0000 014F {
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 0150   switch (ascii_char)
;	ascii_char -> Y+0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 0151      {
; 0000 0152       case 'G':  return 0x00;
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 0153        break;
;PCODE: $000002C7 VOL: 0
; 0000 0154       case 'H':  return 0x01;
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0155        break;
;PCODE: $000002CE VOL: 0
; 0000 0156       case 'I':  return 0x02;
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 0157        break;
;PCODE: $000002D5 VOL: 0
; 0000 0158       case 'J':  return 0x03;
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 0159        break;
;PCODE: $000002DC VOL: 0
; 0000 015A       case 'K':  return 0x04;
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 015B        break;
;PCODE: $000002E3 VOL: 0
; 0000 015C       case 'L':  return 0x05;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 015D        break;
;PCODE: $000002EA VOL: 0
; 0000 015E       case 'M':  return 0x06;
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 015F        break;
;PCODE: $000002F1 VOL: 0
; 0000 0160       case 'N':  return 0x07;
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 0161        break;
;PCODE: $000002F8 VOL: 0
; 0000 0162       case 'O':  return 0x08;
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 0163        break;
;PCODE: $000002FF VOL: 0
; 0000 0164       case 'P':  return 0x09;
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0000 0165        break;
;PCODE: $00000306 VOL: 0
; 0000 0166       case 'Q':  return 0x0A;
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 0167        break;
;PCODE: $0000030D VOL: 0
; 0000 0168       case 'R':  return 0x0B;
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 0169        break;
;PCODE: $00000314 VOL: 0
; 0000 016A       case 'S':  return 0x0C;
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 016B        break;
;PCODE: $0000031B VOL: 0
; 0000 016C       case 'T':  return 0x0D;
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 016D        break;
;PCODE: $00000322 VOL: 0
; 0000 016E       case 'U':  return 0x0E;
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 016F        break;
;PCODE: $00000329 VOL: 0
; 0000 0170       case 'V':  return 0x0F;
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
; 0000 0171        break;
;PCODE: $00000330 VOL: 0
; 0000 0172       default: break;
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 0173      };
;PCODE: $00000333 VOL: 0
; 0000 0174 }
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;
;char get_hex_from_ascii_input(char * frame_in, char lenth_frame_in)
; 0000 0177 {  //char *frame_in='#', 'àäðåñ', 'ðàçìåð','hash-êîä','äàííûå','ñóììà','CR';
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
; 0000 0178    //maxsize(frame_in)= 46 áàéò
; 0000 0179 char i,j;
; 0000 017A j=0;
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;	*frame_in -> Y+3
;	lenth_frame_in -> Y+2
;	i -> R17
;	j -> R16
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
; 0000 017B while (lenth_frame_in)
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 017C     { if((*(frame_in+j))==0x23 )
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 017D           { if (lenth_frame_in>46) {return 1;};              // <( (46-2)/2=22 )
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
; 0000 017E             for(i=0; i<lenth_frame_in ; i++)
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
; 0000 017F                { *(frame_in+i)=*(frame_in+j+i);
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0000 0180                };
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; 0000 0181             break;
;PCODE: $0000036E VOL: 0
; 0000 0182           }
; 0000 0183           else {j++;
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 0184                 lenth_frame_in--;
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0000 0185                };
;PCODE: $00000376 VOL: 0
; 0000 0186     };
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 0187 
; 0000 0188 
; 0000 0189 for (i=0; i*2<(lenth_frame_in-2); i++)                       // i<( (46-2)/2=22 )
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 018A      { if( ((*(frame_in+i*2+1))==0x0D)||((*(frame_in+i*2+2))==0x0D) ) //=='CR'
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 018B           { break;
;PCODE: $00000393 VOL: 0
; 0000 018C           }
; 0000 018D        else{
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 018E            *(frame_in+i)=hex_tetrada_from_ascii_char(*(frame_in+i*2+1));
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0000 018F            *(frame_in+i)<<=4;
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
; 0000 0190            *(frame_in+i)+=hex_tetrada_from_ascii_char(*(frame_in+i*2+2));
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
; 0000 0191            };
;PCODE: $000003BD VOL: 0
; 0000 0192      };
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
; 0000 0193 return 0;
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
; 0000 0194 }
;PCODE: $000003CA VOL: 0
;
;char get_bin_from_bcd(char * frame_in, char data_size)
; 0000 0197 {
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 0000 0198    unsigned long int data_d;
; 0000 0199    char work_tetra;
; 0000 019A    char * batte;
; 0000 019B    data_d=0;
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;	*frame_in -> Y+9
;	data_size -> Y+8
;	data_d -> Y+4
;	work_tetra -> R17
;	*batte -> R18,R19
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
; 0000 019C    if((data_size)>0){ data_d+= (unsigned long int) bcd2bin( *(frame_in+data_size+4-1) ); };
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
; 0000 019D    if((data_size)>1){ data_d+= (unsigned long int) 100*bcd2bin( *(frame_in+data_size+4-2) ); };
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 019E    if((data_size)>2){ data_d+= (unsigned long int) 10000*bcd2bin( *(frame_in+data_size+4-3) ); };
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
; 0000 019F    if((data_size)>3){
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
; 0000 01A0                       work_tetra=(*(frame_in+data_size+4-4))&0xF0;
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0000 01A1                       (*(frame_in+data_size+4-4))&=0x0F;
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
; 0000 01A2                       data_d+= (unsigned long int) 1000000*bcd2bin( *(frame_in+data_size+4-4) );
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0000 01A3                     };
;PCODE: $00000430 VOL: 0
; 0000 01A4    batte=(char *) &data_d;
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
; 0000 01A5    if((data_size)>0) { *(frame_in+data_size+4-1)=*(batte); };
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
; 0000 01A6    if((data_size)>1) { *(frame_in+data_size+4-2)=*(batte+1);};
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0000 01A7    if((data_size)>2) { *(frame_in+data_size+4-3)=*(batte+2); };
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
; 0000 01A8    if((data_size)>3) { *(frame_in+data_size+4-4)=*(batte+3); };
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
; 0000 01A9 
; 0000 01AA    return  work_tetra;
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
; 0000 01AB }
;PCODE: $00000470 VOL: 0
;
;void get_bin_from_bcd_to_time(char * frame_in, char data_size)
; 0000 01AE { unsigned long int data_d;
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
; 0000 01AF    char * batte;
; 0000 01B0    if( (data_size)>2 )
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;	*frame_in -> Y+7
;	data_size -> Y+6
;	data_d -> Y+2
;	*batte -> R16,R17
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
; 0000 01B1            { *(frame_in+data_size+4-4)=bcd2bin( *(frame_in+data_size+4-4) );};  //min
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0000 01B2    data_d=0;
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 01B3 
; 0000 01B4    if((data_size)>3) { data_d+= (unsigned long int) bcd2bin( *(frame_in+data_size+4-5) ); };
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 01B5    if((data_size)>4) { data_d+= (unsigned long int) 100*bcd2bin( *(frame_in+data_size+4-6) ); };
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
; 0000 01B6    if((data_size)>5) { data_d+= (unsigned long int) 10000*bcd2bin( *(frame_in+data_size+4-7) ); };
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
; 0000 01B7 
; 0000 01B8    batte=(char *) &data_d;
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
; 0000 01B9    if((data_size-1)>3) { *(frame_in+data_size+4-5)=*(batte);};
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 01BA    if((data_size-1)>4) { *(frame_in+data_size+4-6)=*(batte+1);};
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
; 0000 01BB    if((data_size-1)>5) { *(frame_in+data_size+4-7)=*(batte+2);};
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
; 0000 01BC }
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;
;char get_data_if_volum_or_flowrate(unsigned int *data, char * frame_in)
; 0000 01BF {  // åñëè ïîêàçàíèÿ îáúåìà èëè ðàñõîäà
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 01C0 unsigned int *batte;
; 0000 01C1 char ii, jj;
; 0000 01C2 float for_data;
; 0000 01C3 unsigned long int for_data_int;
; 0000 01C4 char data_size=(*(frame_in+1))&0x0F;
; 0000 01C5 char work_tetrada;
; 0000 01C6 work_tetrada=get_bin_from_bcd(frame_in, data_size);
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;	*data -> Y+16
;	*frame_in -> Y+14
;	*batte -> R16,R17
;	ii -> R19
;	jj -> R18
;	for_data -> Y+10
;	for_data_int -> Y+6
;	data_size -> R21
;	work_tetrada -> R20
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0000 01C7 
; 0000 01C8 if( (work_tetrada & 0x80)==0 )
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
; 0000 01C9     { if( (work_tetrada & 0x70)==0 )
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
; 0000 01CA         { // öåëîå ïîëîæèòåëüíîå ÷èñëî
; 0000 01CB          for(ii=0, jj=0; (ii<(data_size))&&(jj<2); ii++, jj++)  //ìëàäøèì áàéòîì âïåðåä
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
; 0000 01CC             {  *(data+jj)=0x0000;
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
; 0000 01CD                *(data+jj)= frame_in[data_size+4-ii-1];
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
; 0000 01CE                ii++;
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
; 0000 01CF                if(ii<(data_size))
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
; 0000 01D0                  { *(data+jj)+=( ((unsigned int)frame_in[data_size+4-ii-1])<<8 );  //!!!!!!!!!!!!!!!!!
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
;PCODE: $0000055C VOL: 0
; 0000 01D1                  };
;PCODE: $0000055D VOL: 0
; 0000 01D2             };
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
; 0000 01D3             return 0;
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
; 0000 01D4         }
; 0000 01D5         else {// íå öåëîå ÷èñëî
;PCODE: $00000569 VOL: 0
; 0000 01D6                for_data=0;
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
; 0000 01D7                for_data=(*(frame_in+data_size+4-4));
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
; 0000 01D8                for_data*=256;
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
; 0000 01D9                for_data+=(*(frame_in+data_size+4-3));
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
; 0000 01DA                for(ii=0, jj=0; (ii<(data_size-2))&&(jj<2); ii++, jj++)
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
; 0000 01DB                   {
; 0000 01DC                    for_data*=256;
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
; 0000 01DD                    for_data+=( *(frame_in+data_size+4-2+jj) );
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
; 0000 01DE                   };
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
;PCODE: $000005B5 VOL: 0
; 0000 01DF                for_data*=pow(10,-( (float) ( (work_tetrada)&(0x70))/16 ));
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
; 0000 01E0                if((*(frame_in+2)==0xC1)&&(*(frame_in+3)==0x73) )
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
; 0000 01E1                     { // åñëè ïîêàçàíèÿ îáúåìà
; 0000 01E2                      for_data_int=(unsigned long int)for_data;  // îêðóãëÿåì äî öåëîãî
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
; 0000 01E3                      batte=(unsigned int *) &for_data_int;
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
; 0000 01E4                      *(data)=*(batte);    // ìëàäøèì áàéòîì
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
; 0000 01E5                      *(data+1)=*(batte+1);
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
; 0000 01E6                      return 0;
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
; 0000 01E7                     };
;PCODE: $000005E4 VOL: 0
; 0000 01E8                if( (*(frame_in+2)==0x8F)&&(*(frame_in+3)==0xC2) )
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
; 0000 01E9                     { // åñëè ïîêàçàíèÿ ðàñõîäà
; 0000 01EA                       batte=(unsigned int *) &for_data;
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
; 0000 01EB                       *(data)=*(batte);    // ìëàäøèì áàéòîì
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
; 0000 01EC                       *(data+1)=*(batte+1);
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
; 0000 01ED                       return 0;
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
; 0000 01EE                     };
;PCODE: $00000602 VOL: 0
; 0000 01EF              };
;PCODE: $00000603 VOL: 0
; 0000 01F0     }
; 0000 01F1     else {//îòðèöàòåëüíîå ÷èñëî
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
; 0000 01F2        for( jj=0;jj<2; jj++)  //ìëàäøèì áàéòîì âïåðåä
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
; 0000 01F3             {  *(data+jj)=0x0000;};
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
; 0000 01F4        return 2;
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
; 0000 01F5        };
;PCODE: $0000061F VOL: 0
; 0000 01F6 }
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;
;
;char get_data_if_time(unsigned int *data, char * frame_in)
; 0000 01FA { // åñëè ïîêàçàíèÿ âðåìåíè íàðàáîòêè
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
; 0000 01FB unsigned int *batte;
; 0000 01FC unsigned long int time_min;
; 0000 01FD char data_size=(*(frame_in+1))&0x0F;
; 0000 01FE 
; 0000 01FF  if ( ( (*(frame_in+data_size+4-1))&0x0F )==0x00)   // âðåìÿ ïðåîáðàçóåì ê ìèíóòàì
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;	*data -> Y+10
;	*frame_in -> Y+8
;	*batte -> R16,R17
;	time_min -> Y+4
;	data_size -> R19
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
; 0000 0200     {
; 0000 0201      get_bin_from_bcd_to_time(frame_in, data_size);
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
; 0000 0202      time_min=0;
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
; 0000 0203 //     time_min+=( (*(frame_in+4))&0x0F ); //ñ÷èòûâàåò ÷àñû (2,5 áàéòà)
; 0000 0204      time_min+=( *(frame_in+4)); //ñ÷èòûâàåò ÷àñû (3 áàéòà)
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
; 0000 0205      time_min<<=8;
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
; 0000 0206      time_min+=*(frame_in+5);
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
; 0000 0207      time_min<<=8;
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
; 0000 0208      time_min+=*(frame_in+6);
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
; 0000 0209      time_min*=60;
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
; 0000 020A      time_min+=*(frame_in+7); // ïðèáàâëÿåì ìèíóòû
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
; 0000 020B      batte=(unsigned int *) &time_min;
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
; 0000 020C 
; 0000 020D      *(data)=*(batte);       //!!!!!!!!!!!!!!!!!!
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
; 0000 020E      *(data+1)=*(batte+1);    // ìëàäøèì áàéòîì
;PCODE: $0000066E VOL: 0
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
; 0000 020F      return 0;
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
; 0000 0210      }
; 0000 0211   else {return 7;}; // äðóãàÿ öåíà âðåìåíè
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
; 0000 0212 }
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;
;char get_word_si8(unsigned int *data, char * frame_in)
; 0000 0215 { //data -ðàçìåð 2 ñëîâà(4 áàéòà)
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
; 0000 0216   if( (*(frame_in+4)&0xF0)==0xF0 )
;	*data -> Y+2
;	*frame_in -> Y+0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
; 0000 0217   {
; 0000 0218 //        delay_ms( 1000 );
; 0000 0219         return 5;  // èñêëþ÷èòåëüíàÿ ñèòóàöèÿ
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
; 0000 021A   }
; 0000 021B   else{
;PCODE: $0000068C VOL: 0
; 0000 021C       if( ((*(frame_in+2)==0xC1)&&(*(frame_in+3)==0x73))||((*(frame_in+2)==0x8F)&&(*(frame_in+3)==0xC2)) )
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
; 0000 021D         { // îáúåì èëè ðàñõîä
; 0000 021E           return get_data_if_volum_or_flowrate(data, frame_in);
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
; 0000 021F         }
; 0000 0220       else {
;PCODE: $000006AE VOL: 0
; 0000 0221             if( ((*(frame_in+2)==0xE6)&&(*(frame_in+3)==0x9C)) )    // âðåìÿ
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
; 0000 0222                { // âðåìÿ
; 0000 0223                  return get_data_if_time(data, frame_in);
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
; 0000 0224                }
; 0000 0225             else
;PCODE: $000006C4 VOL: 0
; 0000 0226             {
; 0000 0227 //             delay_ms( 1000 );
; 0000 0228               return 6;
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
; 0000 0229             }; // ñåòåâàÿ îøèáêà.
;PCODE: $000006C8 VOL: 0
; 0000 022A            };
;PCODE: $000006C9 VOL: 0
; 0000 022B       };
;PCODE: $000006CA VOL: 0
; 0000 022C 
; 0000 022D return 0;
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
; 0000 022E }
;PCODE: $000006CE VOL: 0
;
;void main(void)
; 0000 0231 {
;PCODE: $000006CF VOL: 0
; 0000 0232 // Declare your local variables here
; 0000 0233 //char  frame_in[24]={'#', 'G', 'K', 'G', 'L', 'S', 'H', 'N', 'J',
; 0000 0234 //                    'H', 'G','G', 'G', 'G', 'G', 'G', 'K', 'H', 'N',
; 0000 0235 //                   'J', 'J', 'O', 'I', 0x0D};
; 0000 0236 //char lenth_frame_in=24;
; 0000 0237 unsigned int data[2];
; 0000 0238 //char  frame_in[28]={'#', 0x47, 0x4A, 0x47, 0x4E, 0x55, 0x4D, 0x50, 0x53,
; 0000 0239 //                    0x47, 0x47, 0x47, 0x47, 0x47, 0x4B, 0x4C, 0x48, 0x49, 0x4D, 0x4C, 0x4F, 0x4B, 0x47,
; 0000 023A //                    0x48, 0x56, 0x55, 0x50, 0x0D };
; 0000 023B //
; 0000 023C //char lenth_frame_in=28;
; 0000 023D 
; 0000 023E char  frame_in[22]={ 0x23, 0x47, 0x4A, 0x47, 0x4B, 0x53, 0x48, 0x4E, 0x4A,
; 0000 023F                      0x48, 0x48, 0x4A, 0x4D, 0x4F, 0x50, 0x48, 0x4F,
; 0000 0240                      0x4C, 0x4D, 0x53, 0x54, 0x0D };
; 0000 0241 char lenth_frame_in=22;
; 0000 0242 //
; 0000 0243 //char  frame_in[28]={ 0x23, 0x47, 0x4A, 0x47, 0x4E, 0x55, 0x4D, 0x50, 0x53,
; 0000 0244 //                     0x50, 0x49, 0x4A, 0x4B, 0x4B, 0x4F, 0x4B, 0x50, 0x4A, 0x4C, 0x4E, 0x48, 0x4B, 0x47,
; 0000 0245 //                     0x52, 0x51, 0x4C, 0x4D, 0x0D};
; 0000 0246 //char lenth_frame_in=28;
; 0000 0247 
; 0000 0248 
; 0000 0249 // ---------- äëÿ îòëàäêè --------------------------------------------
; 0000 024A 
; 0000 024B //unsigned int pnu_list[5]={0xC173, 0x8FC2, 0xE69C, 0xffff, 0xffff};
; 0000 024C 
; 0000 024D //------------------------------------------------------------------------------
; 0000 024E 
; 0000 024F 
; 0000 0250 // Input/Output Ports initialization
; 0000 0251 // Port A initialization
; 0000 0252 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0253 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0254 PORTA=0x00;
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
;	data -> Y+22
;	frame_in -> Y+0
;	lenth_frame_in -> R17
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
; 0000 0255 DDRA=0x00;
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
; 0000 0256 
; 0000 0257 // Port B initialization
; 0000 0258 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0259 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 025A PORTB=0x00;
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
; 0000 025B DDRB=0x00;
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
; 0000 025C 
; 0000 025D // Port C initialization
; 0000 025E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 025F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0260 PORTC=0x00;
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
; 0000 0261 DDRC=0x00;
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
; 0000 0262 
; 0000 0263 // Port D initialization
; 0000 0264 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0265 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0266 PORTD=0x00;
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
; 0000 0267 DDRD=0x00;
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
; 0000 0268 
; 0000 0269 // Port E initialization
; 0000 026A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 026B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 026C PORTE=0x00;
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
; 0000 026D DDRE=0x00;
;PCODE: $000006E9 VOL: 0
;PCODE: $000006EA VOL: 0
; 0000 026E 
; 0000 026F // Port F initialization
; 0000 0270 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0271 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0272 PORTF=0x00;
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
; 0000 0273 DDRF=0x00;
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
; 0000 0274 
; 0000 0275 // Port G initialization
; 0000 0276 // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0277 // State4=T State3=T State2=T State1=T State0=T
; 0000 0278 PORTG=0x00;
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
; 0000 0279 DDRG=0x00;
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
; 0000 027A 
; 0000 027B // Timer/Counter 0 initialization
; 0000 027C // Clock source: System Clock
; 0000 027D // Clock value: 250,000 kHz
; 0000 027E // Mode: Normal top=FFh
; 0000 027F // OC0 output: Disconnected
; 0000 0280 ASSR=0x00;
;PCODE: $000006F3 VOL: 0
;PCODE: $000006F4 VOL: 0
; 0000 0281 TCCR0=0x04;
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
; 0000 0282 TCNT0=0x00;
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
; 0000 0283 OCR0=0xFA;
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
; 0000 0284 
; 0000 0285 // Timer/Counter 1 initialization
; 0000 0286 // Clock source: System Clock
; 0000 0287 // Clock value: Timer1 Stopped
; 0000 0288 // Mode: Normal top=FFFFh
; 0000 0289 // OC1A output: Discon.
; 0000 028A // OC1B output: Discon.
; 0000 028B // OC1C output: Discon.
; 0000 028C // Noise Canceler: Off
; 0000 028D // Input Capture on Falling Edge
; 0000 028E // Timer1 Overflow Interrupt: Off
; 0000 028F // Input Capture Interrupt: Off
; 0000 0290 // Compare A Match Interrupt: Off
; 0000 0291 // Compare B Match Interrupt: Off
; 0000 0292 // Compare C Match Interrupt: Off
; 0000 0293 TCCR1A=0x00;
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
; 0000 0294 TCCR1B=0x00;
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
; 0000 0295 TCNT1H=0x00;
;PCODE: $000006FF VOL: 0
;PCODE: $00000700 VOL: 0
; 0000 0296 TCNT1L=0x00;
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
; 0000 0297 ICR1H=0x00;
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
; 0000 0298 ICR1L=0x00;
;PCODE: $00000705 VOL: 0
;PCODE: $00000706 VOL: 0
; 0000 0299 OCR1AH=0x00;
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
; 0000 029A OCR1AL=0x00;
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
; 0000 029B OCR1BH=0x00;
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
; 0000 029C OCR1BL=0x00;
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
; 0000 029D OCR1CH=0x00;
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
; 0000 029E OCR1CL=0x00;
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
; 0000 029F 
; 0000 02A0 // Timer/Counter 2 initialization
; 0000 02A1 // Clock source: System Clock
; 0000 02A2 // Clock value: Timer2 Stopped
; 0000 02A3 // Mode: Normal top=FFh
; 0000 02A4 // OC2 output: Disconnected
; 0000 02A5 TCCR2=0x00;
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
; 0000 02A6 TCNT2=0x00;
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
; 0000 02A7 OCR2=0x00;
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
; 0000 02A8 
; 0000 02A9 // Timer/Counter 3 initialization
; 0000 02AA // Clock source: System Clock
; 0000 02AB // Clock value: Timer3 Stopped
; 0000 02AC // Mode: Normal top=FFFFh
; 0000 02AD // OC3A output: Discon.
; 0000 02AE // OC3B output: Discon.
; 0000 02AF // OC3C output: Discon.
; 0000 02B0 // Noise Canceler: Off
; 0000 02B1 // Input Capture on Falling Edge
; 0000 02B2 // Timer3 Overflow Interrupt: Off
; 0000 02B3 // Input Capture Interrupt: Off
; 0000 02B4 // Compare A Match Interrupt: Off
; 0000 02B5 // Compare B Match Interrupt: Off
; 0000 02B6 // Compare C Match Interrupt: Off
; 0000 02B7 TCCR3A=0x00;
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
; 0000 02B8 TCCR3B=0x00;
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
; 0000 02B9 TCNT3H=0x00;
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
; 0000 02BA TCNT3L=0x00;
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
; 0000 02BB ICR3H=0x00;
;PCODE: $00000721 VOL: 0
;PCODE: $00000722 VOL: 0
; 0000 02BC ICR3L=0x00;
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
; 0000 02BD OCR3AH=0x00;
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
; 0000 02BE OCR3AL=0x00;
;PCODE: $00000727 VOL: 0
;PCODE: $00000728 VOL: 0
; 0000 02BF OCR3BH=0x00;
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
; 0000 02C0 OCR3BL=0x00;
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
; 0000 02C1 OCR3CH=0x00;
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
; 0000 02C2 OCR3CL=0x00;
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
; 0000 02C3 
; 0000 02C4 // External Interrupt(s) initialization
; 0000 02C5 // INT0: Off
; 0000 02C6 // INT1: Off
; 0000 02C7 // INT2: Off
; 0000 02C8 // INT3: Off
; 0000 02C9 // INT4: Off
; 0000 02CA // INT5: Off
; 0000 02CB // INT6: Off
; 0000 02CC // INT7: Off
; 0000 02CD EICRA=0x00;
;PCODE: $00000731 VOL: 0
;PCODE: $00000732 VOL: 0
; 0000 02CE EICRB=0x00;
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
; 0000 02CF EIMSK=0x00;
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
; 0000 02D0 
; 0000 02D1 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 02D2 TIMSK=0x02;
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
; 0000 02D3 ETIMSK=0x00;
;PCODE: $00000739 VOL: 0
;PCODE: $0000073A VOL: 0
; 0000 02D4 
; 0000 02D5 // USART0 initialization
; 0000 02D6 // Communication Parameters: 8 Data, 2 Stop, No Parity
; 0000 02D7 // USART0 Receiver: On
; 0000 02D8 // USART0 Transmitter: On
; 0000 02D9 // USART0 Mode: Asynchronous
; 0000 02DA // USART0 Baud Rate: 9600
; 0000 02DB UCSR0A=0x00;
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
; 0000 02DC UCSR0B=0xD8;
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
; 0000 02DD UCSR0C=0x0E;
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
; 0000 02DE UBRR0H=0x00;
;PCODE: $00000741 VOL: 0
;PCODE: $00000742 VOL: 0
; 0000 02DF UBRR0L=0x67;
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
; 0000 02E0 
; 0000 02E1 // Analog Comparator initialization
; 0000 02E2 // Analog Comparator: Off
; 0000 02E3 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 02E4 ACSR=0x80;
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
; 0000 02E5 SFIOR=0x00;
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
; 0000 02E6 
; 0000 02E7 // Global enable interrupts
; 0000 02E8 #asm("sei")
;PCODE: $00000749 VOL: 0
	sei
;PCODE: $0000074A VOL: 0
; 0000 02E9 
; 0000 02EA get_hex_from_ascii_input(frame_in, lenth_frame_in);
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
; 0000 02EB 
; 0000 02EC //get_data_if_volum_or_flowrate( data,  frame_in);
; 0000 02ED 
; 0000 02EE //get_data_if_time(data, frame_in);
; 0000 02EF 
; 0000 02F0 get_word_si8(data, frame_in);
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
; 0000 02F1 
; 0000 02F2 while (1)
;PCODE: $00000754 VOL: 0
; 0000 02F3       {
; 0000 02F4       // Place your code here
; 0000 02F5 
; 0000 02F6       };
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
; 0000 02F7 }
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
